vars:

    mailer-queue: &mailer-queue https://sqs.{region}.amazonaws.com/{account}/cloud-custodian-mailer

    security-team-email: &security-team-email security-team@company.com


policies:

#1 Identity and Access Management
#1.1 Maintain current contact details (Manual)
#1.2 Ensure security contact information is registered (Manual)
#1.3 Ensure security questions are registered in the AWS account (Manual)
#1.4 Ensure no root user account access key exists (Automated)
#1.5 Ensure MFA is enabled for the "root user" account (Automated)
#1.6 Ensure hardware MFA is enabled for the "root user" account (Automated)
#1.7 Eliminate use of the root user for administrative and daily tasks (Automated)
#1.8 Ensure IAM password policy requires minimum length of 14 or greater (Automated)
#1.9 Ensure IAM password policy prevents password reuse (Automated)
- name: aws-account-password-policy-remediate-remediate-pull
  resource: aws.account
  region: us-east-1
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.8','1.9']
    creator: Stacklet
    severity: high
  description: |
    This policy will check the password policy for each account and if it
    doesn't meet security best practices, the password policy will be updated to
    make it more secure. Impacted users will then be notified of the updates.
  filters:
    - or:
      - type: password-policy
        key: MinimumPasswordLength
        value: 14
        op: lt
      - type: password-policy
        key: RequireSymbols
        value: false
      - type: password-policy
        key: RequireNumbers
        value: false
      - type: password-policy
        key: RequireUppercaseCharacters
        value: false
      - type: password-policy
        key: RequireLowercaseCharacters
        value: false
      - type: password-policy
        key: PasswordReusePrevention
        value: 24
        op: lt
      - type: password-policy
        key: MaxPasswordAge
        value: 90
        op: lt
      - type: password-policy
        key: HardExpiry
        value: false
  actions:
    - type: set-password-policy
      policy:
          MinimumPasswordLength: 15
          RequireSymbols: true
          RequireNumbers: true
          RequireUppercaseCharacters: true
          RequireLowercaseCharacters: true
          PasswordReusePrevention: 45
          MaxPasswordAge: 90
          HardExpiry: true
    - type: notify
      template: default.html
      priority_header: 2
      subject: "AWS Account Password Policy - Password Requirements Updated! [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}


#1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password (Automated)
#1.11 Do not setup access keys during initial user setup for all IAM users that have a console password (Manual)
#1.12 Ensure credentials unused for 90 days or greater are disabled (Automated)
- name: aws-iam-user-stale-console-credentials-remediate-mark-remediate-pull
  resource: aws.iam-user
  region: us-east-1
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.12']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-1,EKM-02,EKM-03,GRM-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
      This policy will check all IAM Users for stale console credentials via the
      AWS IAM Credentials report. This will look for old console passwords which
      haven't been used for 90+ days. The policy will then mark the user for
      console credential deletion in 7 days and send a notification to impacted
      users. Stale credentials should be cleaned up if they are no longer
      needed.
  filters:
    - "tag:stale-credentials": absent
    - type: credential
      key: password_enabled
      value: true
    - type: credential
      key: password_last_used
      value_type: age
      value: 90
      op: gt
  actions:
    - type: mark-for-op
      days: 7
      op: delete
      tag: stale-credentials
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS IAM User - Stale Credentials Need Reset Or Will Be Removed In 7 Days!! [custodian {{ account }} - {{ region }}]"
      to:
        - resource-owner
        - *security-team-email
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}



- name: aws-iam-user-stale-console-credentials-remediate-delete-remediate-pull
  resource: aws.iam-user
  region: us-east-1
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.12']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-1,EKM-02,EKM-03,GRM-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
      This policy will find all IAM Users which have been previously marked with stale
      console credentials and delete the console access credentials if still
      unused. A notification will then be sent to impacted users.
  filters:
    - type: marked-for-op
      tag: stale-credentials
      op: delete
    - type: credential
      key: password_enabled
      value: true
    - type: credential
      key: password_last_used
      value_type: age
      value: 96
      op: gt
  actions:
    - type: delete
      options:
        - console-access
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS IAM User - Stale Credentials Removed!! [custodian {{ account }} - {{ region }}]"
      to:
        - resource-owner
        - *security-team-email
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}







#1.13 Ensure there is only one active access key available for any single IAM user (Automated)



#1.14 Ensure access keys are rotated every 90 days or less (Automated)
## -------- REMEDIATION VIA POLICY WORKFLOW ------------
- name: aws-iam-user-expiring-access-keys-remediate-first-notification-remediate-pull
  region: us-east-1
  resource: aws.iam-user
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.14']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-01,EKM-02,EKM-03,GMR-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
      IAM users with Access Keys greater than 60 days old will be identified.
      The old access key will be disabled in 31 days and then deleted 7 days
      after being disabled. This policy will notify impacted users 30 days prior
      to disabling their access keys.
  filters:
    - "tag:access-key-rotation-first": absent
    - "tag:access-key-rotation-second": absent
    - "tag:access-key-rotation-third": absent
    - type: credential
      key: access_keys.last_rotated
      value_type: age
      value: 60
      op: greater-than
    - type: credential
      key: access_keys.active
      value: true
  actions:
    - type: mark-for-op
      tag: access-key-rotation-first
      op: notify
      days: 24
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS IAM User - Access Key(s) Nearing Expiration Will Be Disabled In 31 Days - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}




- name: aws-iam-user-expiring-access-keys-remediate-now-compliant-remediate-pull
  region: us-east-1
  resource: aws.iam-user
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.14']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-01,EKM-02,EKM-03,GMR-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
    IAM Users which had old Access Keys which were marked to be disabled but are
    now rotated and compliant are unmarked.
  filters:
    - type: access-key
      key: Status
      value: Active
    - type: value
      key: "\"c7n:AccessKeys\"[0].Status"
      value: "Active"
    - or:
       - "tag:access-key-rotation-first": present
       - "tag:access-key-rotation-second": present
       - "tag:access-key-rotation-third": present
    - not:
      - or:
        - type: credential
          key: access_keys.last_rotated
          value_type: age
          value: 60
          op: greater-than
        - type: value
          key: "\"c7n:AccessKeys\"[1].Status"
          value: "Inactive"
  actions:
    - type: remove-tag
      tags: ['access-key-rotation-first','access-key-rotation-second','access-key-rotation-third']



- name: aws-iam-user-expiring-access-keys-remediate-second-notification-remediate-pull
  region: us-east-1
  resource: aws.iam-user
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.14']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-01,EKM-02,EKM-03,GMR-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
    Users with IAM Access Keys 84 days old are notified that their old keys will
    be disabled in 7 days if they are not rotated.
  filters:
    - type: marked-for-op
      tag: access-key-rotation-first
      op: notify
  actions:
    - type: mark-for-op
      tag: access-key-rotation-second
      op: notify
      days: 7
    - type: remove-tag
      tags: ['access-key-rotation-first']
    - type: notify
      template: default.html
      priority_header: 1
      subject: "URGENT - AWS IAM User - Expiring Access Key(s) Will Be Disabled And Deleted - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}




- name: aws-iam-user-expiring-access-keys-remediate-disable-remediate-pull
  region: us-east-1
  resource: aws.iam-user
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.14']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-01,EKM-02,EKM-03,GMR-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
    IAM Access Keys 91+ days old in an active state are disabled after sending
    customers 30 day, and 7 day notifications. This policy will notify the
    impacted users as their old access keys have been disabled and will need to
    be rotated.
  filters:
    - type: marked-for-op
      tag: access-key-rotation-second
      op: notify
    - type: credential
      key: access_keys.last_rotated
      value_type: age
      value: 90
      op: greater-than
    - type: credential
      key: access_keys.active
      value: true
  actions:
    - type: mark-for-op
      tag: access-key-rotation-third
      op: notify
      days: 7
    - type: remove-tag
      tags: ['access-key-rotation-second']
    - type: remove-keys
      disable: true
      age: 91
    - type: notify
      template: default.html
      priority_header: 1
      subject: "URGENT - AWS IAM User - Access Key(s) Expired And Have Been Disabled! - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}




- name: aws-iam-user-expiring-access-keys-remediate-delete-remediate-pull
  region: us-east-1
  resource: aws.iam-user
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.14']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,EKM-01,EKM-02,EKM-03,GMR-06,HRS-11,IAM-01,IAM-02,IAM-04,IAM-05,IAM-10,IAM-11,IAM-12]
    creator: Stacklet
    severity: high
  description: |
    IAM Access Keys 98+ days old in a disabled state are identified and deleted
    after sending customers 37 day, 14 day, and 7 day notifications. Impacted
    users will be notified that their expired Access Key(s) have been deleted
    and they will need to be recreated if still needed.
  filters:
    - type: marked-for-op
      tag: access-key-rotation-third
      op: notify
    - type: access-key
      key: Status
      value: Inactive
  actions:
    - type: remove-keys
      disable: false
      age: 97
    - type: remove-tag
      tags: ['access-key-rotation-third']
    - type: notify
      template: default.html
      priority_header: 1
      subject: "URGENT - AWS IAM User - Expired Access Key(s) Have Been Deleted! - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
        type: sqs
        queue: *mailer-queue
        region: {region}




#1.15 Ensure IAM Users Receive Permissions Only Through Groups (Automated)

#1.16 Ensure IAM policies that allow full "*:*" administrative privileges are not attached (Automated)

#1.17 Ensure a support role has been created to manage incidents with AWS Support (Automated)

#1.18 Ensure IAM instance roles are used for AWS resource access from instances (Manual)
#1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed (Automated)
- name: aws-iam-certificate-expired-remediate-delete-remediate-pull
  region: us-east-1
  resource: aws.iam-certificate
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.19']
    creator: Stacklet
    severity: high
  description: |
      If expired IAM server certificates are found, the expired certificates are
      deleted and a notification sent to impacted users.
  filters:
   - type: value
     key: Expiration
     value_type: expiration
     op: greater-than
     value: 0
  actions:
      - type: delete
      - type: notify
        template: default.html
        priority_header: 1
        subject: "AWS IAM Certificate - Expired Server Certificate Deleted!! [custodian {{ account }} - {{ region }}]"
        to:
            - *security-team-email
            - resource-owner
        transport:
            type: sqs
            queue: *mailer-queue
            region: {region}







#1.20 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)' (Automated)
- name: aws-s3-enable-public-block-custom-remediate-remediate-pull
  resource: aws.s3
  region: us-east-1
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['1.20']
    creator: Stacklet
    severity: high
  filters:
    - not:
       - type: check-public-block
         BlockPublicAcls: true
         BlockPublicPolicy: true
         IgnorePublicAcls: false
         RestrictPublicBuckets: true
  actions:
    - type: set-public-block
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: false
      RestrictPublicBuckets: true
      state: true
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS S3 Bucket - Public Block Settings Enabled [custodian {{ account }} - {{ region }}]"
      to:
            - *security-team-email
            - resource-owner
      transport:
            type: sqs
            queue: *mailer-queue
            region: {region}






#1.21 Ensure that IAM Access analyzer is enabled (Automated)
#1.22 Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments (Manual)


#2 Storage
#2.1 Simple Storage Service (S3)
#2.1.1 Ensure all S3 buckets employ encryption-at-rest (Manual)
- name: aws-s3-enable-default-bucket-encryption-remediate-remediate-pull
  region: us-east-1
  resource: aws.s3
  metadata:
    category: [security/encryption]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['2.1.1']
    creator: Stacklet
    severity: high
  description: |
      This policy will identify S3 buckets which are not encrypted and enable
      the default Server Side Encryption (SSE). All S3 buckets should be
      encrypted at rest per AWS security best practices. Impacted S3 bucket
      users will be notified of the updated bucket encryption.
  filters:
    - type: bucket-encryption
      state: False
  actions:
    - type: set-bucket-encryption
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS S3 Bucket - Encryption Has Been Enabled! [custodian {{ account }} - {{ region }}]"
      to:
            - *security-team-email
            - resource-owner
      transport:
            type: sqs
            queue: *mailer-queue
            region: {region}






#2.1.2 Ensure S3 Bucket Policy allows HTTPS requests (Manual)
- name: aws-s3-bucket-deny-http-requests-remediate-remediate-pull
  region: us-east-1
  resource: aws.s3
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['2.1.2']
    creator: Stacklet
    severity: high
  description: |
      This policy will identify S3 buckets which are not denying HTTP requests
      and add a bucket policy statement to block them. A notification will then
      be sent to impacted users. HTTP requests should be denied via S3 bucket
      policy as they are not secure or authenticated. Only HTTPS requests should
      be allowed on S3 buckets to meet AWS security best practices.
  filters:
    - not:
       - type: has-statement
         statements:
            - Effect: Deny
              Condition:
                 Bool:
                    aws:SecureTransport: 'false'
  actions:
    - type: set-statements
      statements:
        - Sid: "DenyHttp"
          Effect: "Deny"
          Action: "s3:GetObject"
          Principal:
            AWS: "*"
          Resource: "arn:aws:s3:::{bucket_name}/*"
          Condition:
            Bool:
              "aws:SecureTransport": false
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS S3 Bucket - HTTP Requests Have Been Blocked! [custodian {{ account }} - {{ region }}]"
      to:
            - *security-team-email
            - resource-owner
      transport:
            type: sqs
            queue: *mailer-queue
            region: {region}




#2.2 Elastic Compute Cloud (EC2)
#2.2.1 Ensure EBS volume encryption is enabled (Manual)
- name: aws-ebs-encrypt-unencrypted-volumes-remediate-remediate-pull
  resource: aws.ebs
  metadata:
    category: [security/encryption]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['2.2.1']
    creator: Stacklet
    severity: high
  description: |
      This policy will identify EBS volumes which are not encrypted and encrypt
      them. A notification will then be sent to the impacted users. Per AWS
      security best practices, all EBS volumes should be encrypted to ensure
      secure data storage and to help prevent unauthorized access.
  filters:
    - type: value
      key: Encrypted
      value: false
  actions:
    - type: encrypt-instance-volumes
      key: alias/your-key-here
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS EBS Volume - Encryption In Progress! [custodian {{ account }} - {{ region }}]"
      to:
            - *security-team-email
            - resource-owner
      transport:
            type: sqs
            queue: *mailer-queue
            region: {region}




#3 Logging
#3.1 Ensure CloudTrail is enabled in all regions (Automated)
- name: aws-cloudtrail-multi-region-remediate-remediate-pull
  resource: aws.cloudtrail
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.1']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,BCR-07,BCR-10,BCR-11,CCC-02,CCC-04,IAM-01,IAM-12,IVS-01,IVS-02,IVS-03]
    creator: Stacklet
    severity: high
  description: |
    This policy will identify CloudTrail Trails that are not currently setup for
    all regions. Per AWS security best practices, CloudTrail should be enabled
    in all regions so unauthorized activity can be detected and logged, no
    matter where it occurs. If non-compliant CloudTrail Trails are identified,
    their multi-region support will be enabled and a notification sent to
    impacted users.
  filters:
      - IsMultiRegionTrail: false
  actions:
      - type: update-trail
        attributes:
          IsMultiRegionTrail: true
      - type: notify
        template: default.html
        priority_header: 1
        subject: "AWS CloudTrail - Now Enabled For All Regions! [custodian {{ account }} - {{ region }}]"
        to:
            - *security-team-email
            - resource-owner
        transport:
            type: sqs
            queue: *mailer-queue
            region: {region}





#3.2 Ensure CloudTrail log file validation is enabled (Automated)
- name: aws-cloudtrail-log-file-validation-remediate-remediate-pull
  resource: aws.cloudtrail
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.2']
    creator: Stacklet
    severity: high
  description: |
    This policy will identify CloudTrail Trails that are not currently setup for
    log file validation. Per AWS security best practices, CloudTrail
    should have log file validation enabled to provide log integrity. If non-compliant CloudTrail Trails
    are identified, their log file validation will be enabled and a notification sent
    to impacted users.
  filters:
      - type: value
        key: "LogFileValidationEnabled"
        value: false
  actions:
      - type: update-trail
        attributes:
          EnableLogFileValidation: true
      - type: notify
        template: default.html
        priority_header: 1
        subject: "AWS CloudTrail - Log File Validation Now Enabled! [custodian {{ account }} - {{ region }}]"
        to:
            - *security-team-email
            - resource-owner
        transport:
            type: sqs
            queue: *mailer-queue
            region: {region}








#3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible (Automated)
#3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs (Automated)
- name: aws-cloudtrail-cloudwatch-integration-remediation-remediate-pull
  resource: aws.cloudtrail
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.4']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,CCC-04,IAM-01,IVS-01,IVS-02]
    creator: Stacklet
    severity: high
  description: |
    This policy will identify CloudTrail Trails that are not currently setup for
    CloudWatch Logs integration. Per AWS security best practices, CloudTrail
    should be logging to CloudWatch Logs to enable realtime and historic logging
    of all events. This allows setting up alarms based on user API activity. If
    non-compliant CloudTrail Trails are identified, logging will be enabled and
    a notification will be sent to impacted users.
  filters:
      - type: status
        key: IsLogging
        value: False
  actions:
      - type: set-logging
        enabled: True
      - type: notify
        template: default.html
        priority_header: 1
        subject: "AWS CloudTrail - CloudWatch Logging Now Enabled! [custodian {{ account }} - {{ region }}]"
        to:
            - *security-team-email
            - resource-owner
        transport:
            type: sqs
            queue: *mailer-queue
            region: {region}





#3.5 Ensure AWS Config is enabled in all regions (Automated)



##3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket (Automated)
#3.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs (Automated)
- name: aws-cloudtrail-encrypted-remediate-remediate-pull
  resource: aws.cloudtrail
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.7']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,CCC-02,CCC-04,IAM-01,IVS-01,IVS-02]
    creator: Stacklet
    severity: high
  description: |
    This policy will identify CloudTrail Trails that are not currently being
    encrypted and enable encryption. Per AWS security best practices, CloudTrail
    should be encrypted with an AWS KMS key to help protect the sensitive data
    from unauthorized users. Having encryption enabled provides another layer of
    security as it requires users to have decrypt KMS permissions for the
    CloudTrail S3 bucket. Impacted users will be notified.
  filters:
      - KmsKeyId: empty
  actions:
      - type: update-trail
        attributes:
            KmsKeyId: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef
      - type: notify
        template: default.html
        priority_header: 1
        subject: "AWS CloudTrail - Log Encryption Is Now Enabled! [custodian {{ account }} - {{ region }}]"
        to:
            - *security-team-email
            - resource-owner
        transport:
            type: sqs
            queue: *mailer-queue
            region: {region}








#3.8 Ensure rotation for customer created CMKs is enabled (Automated)
- name: aws-kms-key-rotation-remediate-remediate-pull
  resource: aws.kms-key
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.8']
      - type: CCM
        version: 3.0.1
        control-mappings: [AIS-04,AAC-03,BCR-05,BCR-11,CCC-02,CCC-04,DSI-01,DSI-03,DSI-06,DSI-07,EKM-01,EKM-02,EKM-03,EKM-04,IAM-02,IVS-11]
    creator: Stacklet
    severity: high
  description: |
     This policy will identify KMS keys that have not been set to auto rotate
     yearly and then the policy enables the auto-rotate setting. Per AWS
     security best practices, KMS keys should be rotated automatically to help
     prevent the impact of compromised keys. Impacted users will be notified
     that rotation has been enabled for their KMS keys.
  filters:
    - type: key-rotation-status
      key: KeyRotationEnabled
      value: false
    - type: value
      key: KeyState
      op: eq
      value: "Enabled"
  actions:
    - type: set-rotation
      state: True
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS KMS Key - Auto Rotation Has Been Enabled! - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
          type: sqs
          queue: *mailer-queue
          region: {region}





#3.9 Ensure VPC flow logging is enabled in all VPCs (Automated)
- name: aws-vpc-flow-log-remediate-remediate-pull
  resource: aws.vpc
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.9']
      - type: CCM
        version: 3.0.1
        control-mappings: [CCC-05,IVS-12]
    creator: Stacklet
    severity: high
    long-description: |
      This policy will identify AWS VPC flow logs which are either not enabled
      or not configured properly and enable them. Per AWS security best
      practices, VPC flow logs should be enabled as they record and provide
      insights into traffic that traverses the VPC and can help identify
      anomalies or security issues. Impacted users will be notified.
  description: |
    Identify VPCs which don't have flow logs setup, enable them and send a
    notification to impacted users.
  filters:
    - type: flow-logs
      enabled: false
  actions:
    - type: set-flow-log
      TrafficType: ALL
      DeliverLogsPermissionArn: arn:iam:role-arn-here
      LogGroupName: /custodian/vpc/flowlogs/
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS VPC Flow Logs - Flow Logs Are Now Enabled! - [custodian {{ account }} - {{ region }}]"
      to:
        - *security-team-email
        - resource-owner
      transport:
          type: sqs
          queue: *mailer-queue
          region: {region}





#3.10 Ensure that Object-level logging for write events is enabled for S3 bucket(Automated)
#3.11 Ensure that Object-level logging for read events is enabled for S3 bucket(Automated)
- name: aws-cloudtrail-enable-data-events-remediate-remediate-pull
  region: us-east-1
  resource: aws.account
  metadata:
    category: [security/logging]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['3.10','3.11']
    creator: Stacklet
    severity: high
  description: |
      This policy will enable data events for CloudTrail logs. A notification
      will then be sent to impacted users. Data events should be enabled to
      provide additional logging and insights into S3 events to meet AWS
      security best practices.
  actions:
    - type: enable-data-events
      data-trail:
        name: s3-read-write-events
        type: All
        create: true
        s3-bucket: your-global-s3-object-level-logs
        s3-prefix: "{bucket_name}/"
        multi-region: us-east-1
    - type: notify
      template: default.html
      priority_header: 1
      subject: "AWS CloudTrail - Data Events Enabled! [custodian {{ account }} - {{ region }}]"
      to:
            - *security-team-email
            - resource-owner
      transport:
            type: sqs
            queue: *mailer-queue
            region: {region}






#4 Monitoring
#4.1 Ensure a log metric filter and alarm exist for unauthorized API calls(Automated)
#4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA (Automated)
#4.3 Ensure a log metric filter and alarm exist for usage of "root" account(Automated)
#4.4 Ensure a log metric filter and alarm exist for IAM policy changes (Automated)
#4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes(Automated)
#4.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures (Automated)
#4.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs (Automated)
#4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes(Automated)
#4.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes (Automated)
#4.10 Ensure a log metric filter and alarm exist for security group changes(Automated)
#4.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL) (Automated)
#4.12 Ensure a log metric filter and alarm exist for changes to network gateways (Automated)
#4.13 Ensure a log metric filter and alarm exist for route table changes (Automated)
#4.14 Ensure a log metric filter and alarm exist for VPC changes (Automated)
#4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes (Automated)

#5 Networking
#5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports (Automated)
#5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports (Automated)
- name: aws-security-group-open-rule-remediate-remediate-pull
  resource: aws.security-group
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['5.2']
      - type: CCM
        version: 3.0.1
        control-mappings: [GRM-01]
    creator: Stacklet
    severity: high
    long-description: |
      This policy will identify AWS security groups which have rules which allow
      ingress from all IPv4 or IPv6 addresses via 0.0.0.0/0 or ::0/0 and remove
      the offending rules. The policy will then notify the impacted users. Per
      security best practices, security group rules should be limited to only
      the necessary IP CIDRs needed for communication and should not be open to
      everyone as this presents a large security risk to your infrastructure and
      may allow attackers to access your environment.
  description: |
    This policy will find security groups open to the world, remove the
    offending rules, and send a notification to impacted users.
  filters:
    - or:
          - type: ingress
            Cidr:
              value: "0.0.0.0/0"
          - type: ingress
            CidrV6:
              value: "::/0"
  actions:
   - type: remove-permissions
     ingress: matched
   - type: notify
     template: default.html
     priority_header: 1
     subject: "AWS Security Group - Open Rule Removed!!! - [custodian {{ account }} - {{ region }}]"
     to:
       - resource-owner
       - *security-team-email
     transport:
       type: sqs
       queue: *mailer-queue
       region: us-east-1






#5.3 Ensure the default security group of every VPC restricts all traffic (Automated)
- name: aws-security-group-vpc-default-restrict-all-remediate-remediate-pull
  resource: aws.security-group
  metadata:
    category: [security/access-control]
    compliance:
      - type: CIS
        version: 1.3.0
        control-mappings: ['5.3']
      - type: CCM
        version: 3.0.1
        control-mappings: [CCC-05,GRM-01,IVS-06,IVS-12]
    creator: Stacklet
    severity: high
    long-description: |
      This policy will identify AWS VPC default security groups which are
      allowing any ingress or egress traffic and removes all ingress and egress
      rules. The policy will then notify the impacted users. Per security best
      practices, AWS default VPC security group rules should be restricting all
      traffic to encourage least privileged access and the creation of custom
      security groups which match the exact traffic needs for a specific
      resource or set of resources.
  description: |
    This policy will find AWS VPC default security groups which have any ingress
    or egress permissions. It them removed all ingress and egress rules and
    sends a notification to impacted users.
  filters:
      - "GroupName": "default"
      - or:
           - "IpPermissions": not-null
           - "IpPermissionsEgress": not-null
  actions:
   - type: remove-permissions
     ingress: all
     egress: all
   - type: notify
     template: default.html
     priority_header: 1
     subject: "AWS VPC Default Security Group - All Ingress And Egress Rules Removed!!! - [custodian {{ account }} - {{ region }}]"
     to:
       - resource-owner
       - *security-team-email
     transport:
       type: sqs
       queue: *mailer-queue
       region: us-east-1






#5.4 Ensure routing tables for VPC peering are "least access" (Manual)
